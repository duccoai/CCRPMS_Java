package com.academy.ccrpms.application.service;

import com.academy.ccrpms.application.entity.Application;
import com.academy.ccrpms.application.entity.ApplicationStatus;
import com.academy.ccrpms.application.repository.ApplicationRepository;
import com.academy.ccrpms.job.entity.Job;
import com.academy.ccrpms.job.repository.JobRepository;
import com.academy.ccrpms.user.entity.User;
import com.academy.ccrpms.user.repository.UserRepository;
import com.academy.ccrpms.exam.entity.Submission;
import com.academy.ccrpms.exam.repository.SubmissionRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@RequiredArgsConstructor
public class ApplicationService {

    private final ApplicationRepository applicationRepository;
    private final UserRepository userRepository;
    private final JobRepository jobRepository;
    private final SubmissionRepository submissionRepository;

    // üü© N·ªôp h·ªì s∆° ·ª©ng tuy·ªÉn
    public Application submitApplication(Long userId, Long jobId) {
        System.out.println(">>> SubmitApplication called for userId=" + userId + ", jobId=" + jobId);
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        Job job = jobRepository.findById(jobId)
                .orElseThrow(() -> new RuntimeException("Job not found"));

        Application app = Application.builder()
                .user(user)
                .job(job)
                .status(ApplicationStatus.PENDING)
                .build();

        return applicationRepository.save(app);
    }

    // üü© L·∫•y danh s√°ch h·ªì s∆° c·ªßa ng∆∞·ªùi d√πng
    public List<Application> getApplicationsByUser(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        return applicationRepository.findByUser(user);
    }

    // üü© Theo d√µi tr·∫°ng th√°i h·ªì s∆°
    public List<Map<String, Object>> getApplicationStatuses(Long userId) {
        List<Application> apps = applicationRepository.findByUserId(userId);
        List<Map<String, Object>> result = new ArrayList<>();

        for (Application app : apps) {
            Map<String, Object> map = new HashMap<>();
            map.put("jobTitle", app.getJob() != null ? app.getJob().getTitle() : "Ch∆∞a x√°c ƒë·ªãnh");
            map.put("location", app.getJob() != null ? app.getJob().getLocation() : "N/A");
            map.put("submittedAt", app.getCreatedAt());
            map.put("statusCode", app.getStatus() != null ? app.getStatus().name() : "UNKNOWN");

            String statusText;
            if (app.getStatus() == null) {
                statusText = "Kh√¥ng r√µ tr·∫°ng th√°i";
            } else {
                switch (app.getStatus()) {
                    case PENDING:
                        statusText = "ƒêang ch·ªù duy·ªát";
                        break;
                    case INTERVIEW:
                        statusText = "ƒê∆∞·ª£c ph·ªèng v·∫•n";
                        break;
                    case REJECTED:
                        statusText = "Tr∆∞·ª£t";
                        break;
                    case HIRED:
                        statusText = "ƒê·ªó";
                        break;
                    default:
                        statusText = "Kh√¥ng r√µ tr·∫°ng th√°i";
                }
            }

            map.put("status", statusText);
            result.add(map);
        }
        return result;
    }

    // üü© Xem k·∫øt qu·∫£ tuy·ªÉn d·ª•ng (ƒëi·ªÉm thi + tr·∫°ng th√°i)
    public List<Map<String, Object>> getApplicationResults(Long userId) {
        List<Application> apps = applicationRepository.findByUserId(userId);
        List<Submission> submissions = submissionRepository.findByUserId(userId);
        List<Map<String, Object>> results = new ArrayList<>();

        for (Application app : apps) {
            Map<String, Object> map = new HashMap<>();
            map.put("jobTitle", app.getJob() != null ? app.getJob().getTitle() : "N/A");
            map.put("location", app.getJob() != null ? app.getJob().getLocation() : "N/A");
            map.put("submittedAt", app.getCreatedAt());
            map.put("status", app.getStatus() != null ? app.getStatus().name() : "UNKNOWN");

            // t√¨m submission t∆∞∆°ng ·ª©ng
            Submission submission = submissions.stream()
                    .filter(s -> s.getApplication() != null && s.getApplication().getId().equals(app.getId()))
                    .findFirst()
                    .orElse(null);

            map.put("testScore", submission != null ? submission.getScore() : null);
            map.put("interviewScore", null); // s·∫Ω th√™m module ph·ªèng v·∫•n sau

            String finalResult;
            if (app.getStatus() == null) {
                finalResult = "Kh√¥ng r√µ tr·∫°ng th√°i";
            } else {
                switch (app.getStatus()) {
                    case HIRED:
                        finalResult = "ƒê·ªó";
                        break;
                    case REJECTED:
                        finalResult = "Tr∆∞·ª£t";
                        break;
                    case INTERVIEW:
                        finalResult = "ƒêang ph·ªèng v·∫•n";
                        break;
                    default:
                        finalResult = "ƒêang ch·ªù duy·ªát";
                }
            }
            map.put("finalResult", finalResult);

            results.add(map);
        }
        return results;
    }
}
